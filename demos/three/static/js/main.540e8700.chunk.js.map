{"version":3,"sources":["logo.svg","store.js","util.js","keyboard.js","ScrollIntoView.js","CanvasWrapper.js","_generated.js","threeFiber.js","App.js","serviceWorker.js","events.js","index.js"],"names":["module","exports","_store","dispatch","toS","obj","Object","prototype","toString","call","Array","isArray","onKey","e","window","event","keyCode","preventDefault","stopPropagation","which","String","fromCharCode","Number","charCode","console","log","type","mapKeyBoardEventToData","key","code","timeStamp","React","Component","Dodecahedron","useThree","size","viewport","aspect","width","useSpring","scale","position","rotation","config","mass","friction","tension","spring","set","bindDrag","useDrag","offset","x","y","vxvy","down","pointerEvents","bindHover","useHover","hovering","mesh","castShadow","attach","args","threeFiber","style","background","shadowMap","camera","intensity","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","receiveShadow","color","Text","children","opacity","fontSize","height","viewportWidth","viewportHeight","canvas","useMemo","document","createElement","context","getContext","font","textAlign","textBaseline","fillStyle","fillText","sprite","spriteMaterial","transparent","image","premultiplyAlpha","onUpdate","s","needsUpdate","addEventListener","c","conn","connect","state","Boolean","location","hostname","match","n","store","createStore","action","startsWith","actions","defs","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,gICCvCC,G,kBAAS,MAWPC,EAAW,WAAc,IAAD,EAC1B,OAAO,EAAAD,GAAOC,SAAP,oB,MCFX,SAASC,EAAKC,GAAO,OAAOC,OAAOC,UAAUC,SAASC,KAAKJ,GAO3CK,MAAMC,Q,8NCftB,SAASC,EAAMC,GAEO,KADlBA,EAAIA,GAAKC,OAAOC,OACVC,UACFH,EAAEI,iBACFJ,EAAEK,mBAEN,IAkBaH,EACM,OADNA,EAlBMF,GAmBTM,MACCC,OAAOC,aAAaN,EAAMC,SACX,GAAfD,EAAMI,MACNC,OAAOC,aAAaC,OAAOP,EAAMI,QACf,GAAlBJ,EAAMQ,UACNH,OAAOC,aAAaN,EAAMQ,UAnBrCC,QAAQC,IAAIZ,GACZV,E,yVAAS,CAAD,CAAGuB,KAAM,YAAeC,EAAuBd,KAE3D,IAAMc,EAAyB,SAACd,GAAM,IAC3Ba,EAAuCb,EAAvCa,KAAME,EAAiCf,EAAjCe,IAAKC,EAA4BhB,EAA5BgB,KAAMb,EAAsBH,EAAtBG,QAAsBH,EAAbiB,UACjC,MAAO,CACHJ,OAAKE,MAAIC,OAAKb,Y,yCCnBOe,IAAMC,U,wBCEPD,IAAMC,UCGlC,I,uCCCA,SAASC,IAAgB,IAAD,EACOC,cAAnBC,EADY,EACZA,KAAMC,EADM,EACNA,SACRC,EAASF,EAAKG,MAAQF,EAASE,MAFjB,EAGEC,aAAU,iBAAO,CACnCC,MAAO,CAAC,EAAG,EAAG,GACdC,SAAU,CAAC,EAAG,EAAG,GACjBC,SAAU,CAAC,EAAG,EAAG,GACjBC,OAAQ,CAAEC,KAAM,EAAGC,SAAU,GAAIC,QAAS,SAP1B,mBAGbC,EAHa,KAGLC,EAHK,KASdC,EAAWC,aACb,gCAAGC,OAAH,GAAYC,EAAZ,KAAeC,EAAf,qBAAmBC,KAAnB,eAAmCC,KAAnC,+CAAwDP,EAAI,CAAEP,SAAU,CAACW,EAAIf,GAASgB,EAAIhB,EAAQ,GAAIK,SAAU,CAACW,EAAIhB,EAAQe,EAAIf,EAAQ,OACzI,CAAEmB,eAAe,IAGfC,EAAYC,aAAS,gBAAGC,EAAH,EAAGA,SAAH,OAAkBX,EAAI,CAAER,MAAOmB,EAAW,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,OAAO,CACjGH,eAAe,IAGnB,OACI,kBAAC,IAAEI,KAAH,iBAAYb,EAAYE,IAAgBQ,IAAxC,CAAqDI,YAAU,IAC3D,gDAA4BC,OAAO,WAAWC,KAAM,CAAC,IAAK,KAC1D,wCAAoBD,OAAO,cAIhC,IAAME,EAAa,kBACtB,kBAAC,IAAD,CAAQC,MAAO,CAAEC,WAAY,aAAeC,WAAS,EAACC,OAAQ,CAAE3B,SAAU,CAAC,EAAG,EAAG,KAC7E,kCAAc4B,UAAW,KACzB,+BAAWA,UAAW,GAAK5B,SAAU,CAAC,GAAI,GAAI,IAAK6B,MAAO,GAAKC,SAAU,EAAGC,uBAAsB,KAAMC,wBAAuB,KAAMZ,YAAU,IAC/I,0BAAMa,eAAa,GACf,yCAAqBZ,OAAO,WAAWC,KAAM,CAAC,IAAM,OACpD,uCAAmBD,OAAO,WAAWa,MAAM,aAE/C,kBAAC1C,EAAD,MACA,kBAAC2C,EAAD,cAIR,SAASA,EAAT,GAAiF,IAAjEC,EAAgE,EAAhEA,SAAUpC,EAAsD,EAAtDA,SAAUqC,EAA4C,EAA5CA,QAA4C,IAAnCH,aAAmC,MAA3B,QAA2B,MAAlBI,gBAAkB,MAAP,IAAO,IAIxE7C,cAJwE,IAExEC,KAAOG,EAFiE,EAEjEA,MAAO0C,EAF0D,EAE1DA,OAF0D,IAGxE5C,SAAkB6C,EAHsD,EAG7D3C,MAA8B4C,EAH+B,EAGvCF,OAE/BxC,EAAQyC,EAAgBC,EAAiBD,EAAgBC,EACzDC,EAASC,mBACX,WACI,IAAMD,EAASE,SAASC,cAAc,UACtCH,EAAO7C,MAAQ6C,EAAOH,OAAS,KAC/B,IAAMO,EAAUJ,EAAOK,WAAW,MAMlC,OALAD,EAAQE,KAAR,eAAuBV,EAAvB,2IACAQ,EAAQG,UAAY,SACpBH,EAAQI,aAAe,SACvBJ,EAAQK,UAAYjB,EACpBY,EAAQM,SAAShB,EAAU,KAAM,KAC1BM,IAEX,CAACN,EAAUvC,EAAO0C,IAEtB,OACI,kBAAC,IAAEc,OAAH,CAAUtD,MAAO,CAACA,EAAOA,EAAO,GAAIC,SAAUA,GAC1C,kBAAC,IAAEsD,eAAH,CAAkBjC,OAAO,WAAWkC,aAAW,EAAClB,QAASA,GACrD,mCAAehB,OAAO,MAAMmC,MAAOd,EAAQe,kBAAgB,EAACC,SAAU,SAAAC,GAAC,OAAKA,EAAEC,aAAc,OJ7CxGhB,SAASiB,iBAAiB,UAAW1F,GACrCyE,SAASiB,iBAAiB,QAAS1F,GKuIvC,IP/Ic2F,EOyJCC,GPzJDD,EOmEd,WACI,OAAOvC,KPpESyC,aAAQ,SAACC,GAAD,OAASA,IAAM,GAAvBD,CAA2BF,IQJ3BI,QACW,cAA7B7F,OAAO8F,SAASC,UAEe,UAA7B/F,OAAO8F,SAASC,UAEhB/F,OAAO8F,SAASC,SAASC,MACvB,2D,okBCfN,IAAIC,EAAE,ECOAC,EAAQC,aDMc,SAACP,EAAOQ,GAEhC,GADaA,EAAOxF,KACXyF,WAAW,WAAY,OAAOT,EACvC,IAAMU,EAAO,sBAAOV,EAAMU,SAAb,MAAyBF,EAAzB,CAAiCH,QAK9C,OADAA,IAHY,CACRK,aTfG,CACHA,QAAS,GACTV,MAAO,UACPW,KAAM,KANVnH,EUQK8G,EACTM,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,OAEJ3B,SAASmC,eAAe,SFiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.540e8700.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import {connect} from \"react-redux\"\r\nlet _store = null\r\nconst setStore =(s) => {\r\n    _store = s\r\n}\r\nexport const getInitialState = () => {\r\n    return {\r\n        actions: [],\r\n        state: \"default\",\r\n        defs: [],\r\n    }\r\n}\r\nconst dispatch = (...args) => {\r\n    return _store.dispatch(...args);\r\n}\r\nconst state = ()=>_store.getState()\r\nconst conn = (c) => connect((state)=>state,{})(c)\r\n\r\nexport {setStore, dispatch, state, conn }","export const stringifyEvent = e => {\r\n    const obj = {};\r\n    for (let k in e) {\r\n        obj[k] = e[k];\r\n    }\r\n    return JSON.stringify(obj, (k, v) => {\r\n        if (v instanceof Node) return 'Node';\r\n        if (v instanceof Window) return 'Window';\r\n        return v;\r\n    }, ' ');\r\n};\r\nfunction toS (obj) { return Object.prototype.toString.call(obj) }\r\nfunction isDate (obj) { return toS(obj) === '[object Date]' }\r\nfunction isRegExp (obj) { return toS(obj) === '[object RegExp]' }\r\nfunction isError (obj) { return toS(obj) === '[object Error]' }\r\nfunction isBoolean (obj) { return toS(obj) === '[object Boolean]' }\r\nfunction isNumber (obj) { return toS(obj) === '[object Number]' }\r\nfunction isString (obj) { return toS(obj) === '[object String]' }\r\nconst isArray = Array.isArray || function isArray (xs) { return toS(xs) === '[object Array]'; };\r\nexport const GetTypeStr = (obj) => {\r\n    if (obj===undefined) return \"Undefined\"\r\n    if (obj===null) return \"Null\"\r\n    if (obj===NaN) return \"NaN\"\r\n    return toS(obj).replace(\"[object \",\"\").replace(\"]\", \"\");\r\n}\r\nexport const stringifyEvent2 = e => {\r\n    const ret = {};\r\n    for (let k in e) {\r\n        const v = e[k];\r\n        if (isString(v) || isBoolean(v) || isNumber(v)) {\r\n            ret[k] = v;\r\n        }\r\n    }\r\n    return ret;\r\n};\r\nexport const enhance = (o) => {\r\n\r\n}\r\n// Object.prototype._tojson = function(replacer) {\r\n//     return JSON.stringify(this,replacer,2);\r\n// }\r\n// Object.prototype._isany = function(items) {\r\n//     var l = items.length;\r\n//     for (let i = 0; i < l; i++) {\r\n//         if (items[i]===this) return true;\r\n//     }\r\n//     return false;\r\n// }\r\nexport function* rollingSequence(items) {\r\n    while(true) {\r\n        for (let i = 0; i < items.length; i++) {\r\n            const ret = items[i];\r\n            yield ret;\r\n        }\r\n    }\r\n}","import React from \"react\"\r\nimport {dispatch} from \"./store\"\r\nimport {stringifyEvent, stringifyEvent2} from \"./util\";\r\nfunction onKey(e) {\r\n    e = e || window.event\r\n    if (e.keyCode === 8) {                                           // Disable Backspace\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n    }\r\n    var data = getChar(e)\r\n\r\n    //if (data === \" \") data = ' ';\r\n    const style = {backgroundColor:\"black\", fontSize: '12px'}\r\n    //const jsx = <JsonView style={style} src={data} />\r\n    console.log(e)\r\n    dispatch({ type: 'keyboard', ...mapKeyBoardEventToData(e) })\r\n}\r\nconst mapKeyBoardEventToData = (e)=> {\r\n    const {type, key, code, keyCode, timeStamp} = e;\r\n    return {\r\n        type,key,code,keyCode,    }\r\n}\r\nconst initKeyboard = ()=> {\r\n    document.addEventListener(\"keydown\", onKey);\r\n    document.addEventListener(\"keyup\", onKey);\r\n}\r\n\r\nfunction getChar(event) {\r\n    if (event.which == null) {\r\n        return String.fromCharCode(event.keyCode) // IE\r\n    } else if (event.which != 0) {\r\n        return String.fromCharCode(Number(event.which)) // the rest\r\n    } else if (event.charCode != 0) {\r\n        return String.fromCharCode(event.charCode) // the rest\r\n    }\r\n    else {\r\n        return null // special key\r\n    }\r\n}\r\n\r\nexport { initKeyboard }","import React from 'react'\r\nclass ScrollIntoView extends React.Component {\r\n    componentDidMount() {\r\n        this.scroll()\r\n    }\r\n    componentDidUpdate() {\r\n        this.scroll()\r\n    }\r\n\r\n    scroll() {\r\n        this.el.scrollIntoView()\r\n    }\r\n\r\n    render() {\r\n        return <span ref={el => { this.el = el; }} />\r\n    }\r\n}\r\n\r\nexport default ScrollIntoView","/* eslint-disable no-undef */\r\nimport React from 'react'\r\n//https://stackoverflow.com/questions/35031129/how-to-render-binary-data-on-canvas-using-webgl\r\nclass CanvasWrapper extends React.Component {\r\n    componentDidMount() {\r\n    }\r\n    componentDidUpdate() {\r\n    }\r\n    render() {\r\n        const that = this;\r\n\r\n        function foo(canvas) {\r\n            if (that.initialized) return;\r\n            that.initialized = true;\r\n            var gl = canvas.getContext(\"webgl\");\r\n\r\n            var data = [];\r\n            data.push(0,0,0,255);\r\n            for (var i = 1 ; i < 256; i++){\r\n                data.push(0,0,120,255);\r\n            }\r\n\r\n            var pixels = new Uint8Array(data); // 16x16 RGBA image\r\n            var texture = gl.createTexture();\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(\r\n                gl.TEXTURE_2D, // target\r\n                0, // mip level\r\n                gl.RGBA, // internal format\r\n                16, 16, // width and height\r\n                0, // border\r\n                gl.RGBA, //format\r\n                gl.UNSIGNED_BYTE, // type\r\n                pixels // texture data\r\n            );\r\n            gl.generateMipmap(gl.TEXTURE_2D);  // you need to do this or set filtering\r\n\r\n// compiles and links the shaders and looks up uniform and attribute locations\r\n            var programInfo = twgl.createProgramInfo(gl, [\"vs\", \"fs\"]);\r\n            var arrays = {\r\n                position: [\r\n                    -1, -1, 0,\r\n                    1, -1, 0,\r\n                    -1,  1, 0,\r\n                    -1,  1, 0,\r\n                    1, -1, 0,\r\n                    1,  1, 0,\r\n                ],\r\n            };\r\n// calls gl.createBuffer, gl.bindBuffer, gl.bufferData for each array\r\n            var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\r\n\r\n            var uniforms = {\r\n                u_texture: texture,\r\n            };\r\n\r\n            gl.useProgram(programInfo.program);\r\n// calls gl.bindBuffer, gl.enableVertexAttribArray, gl.vertexAttribPointer\r\n            twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo);\r\n// calls gl.activeTexture, gl.bindTexture, gl.uniformXXX\r\n            twgl.setUniforms(programInfo, uniforms);\r\n// calls gl.drawArrays or gl.drawElements\r\n            twgl.drawBufferInfo(gl, gl.TRIANGLES, bufferInfo);\r\n\r\n        }\r\n        return <canvas ref={foo} width={16} height={16} />\r\n    }\r\n}\r\n\r\nexport default CanvasWrapper","export function stateMap(currentState, input) {\n    if (currentState === \"default\" && input === \"`\") return \"intellisenseOpen\";\n    if (currentState === \"intellisenseOpen\" && input === \"ctrl\") return \"ctrlChordIntellisenseOpen\";\n    if (currentState === \"ctrlChordIntellisenseOpen\" && input === \"`\") return \"default\";\n    return currentState\n}\nconst intellisense = {\n    events: \"events\",\n    string: \"string\",\n}\nexport const exampleState = {\n    actions: [{\n        type: 'keyboard',\n        data: {\n            type: 'keydown',\n            key: 'a',\n            code: 'KeyA',\n            keyCode: 65,\n            timeStamp: 5000.150000094436\n        },\n        n: 1\n    }, {\n        type: 'keyboard',\n        data: {\n            type: 'keyup',\n            key: 'a',\n            code: 'KeyA',\n            keyCode: 65,\n            timeStamp: 5086.9100000709295\n        },\n        n: 2\n    }, {\n        type: 'keyboard',\n        data: {\n            type: 'keydown',\n            key: 'b',\n            code: 'KeyB',\n            keyCode: 66,\n            timeStamp: 5281.220000004396\n        },\n        n: 3\n    }, {\n        type: 'keyboard',\n        data: {\n            type: 'keyup',\n            key: 'b',\n            code: 'KeyB',\n            keyCode: 66,\n            timeStamp: 5366.095000063069\n        },\n        n: 4\n    }, {\n        type: 'keyboard',\n        data: {\n            type: 'keydown',\n            key: 'c',\n            code: 'KeyC',\n            keyCode: 67,\n            timeStamp: 5518.635000102222\n        },\n        n: 5\n    }, {\n        type: 'keyboard',\n        data: {\n            type: 'keyup',\n            key: 'c',\n            code: 'KeyC',\n            keyCode: 67,\n            timeStamp: 5606.145000085235\n        },\n        n: 6\n    }]\n}","import ReactDOM from \"react-dom\"\r\nimport React, { useMemo } from \"react\"\r\nimport { Canvas, useThree } from \"react-three-fiber\"\r\nimport { useDrag, useHover } from \"react-use-gesture\"\r\nimport { useSpring, a } from \"react-spring/three\"\r\n//import \"./threeFiber.css\"\r\n\r\nfunction Dodecahedron() {\r\n    const { size, viewport } = useThree()\r\n    const aspect = size.width / viewport.width\r\n    const [spring, set] = useSpring(() => ({\r\n        scale: [1, 1, 1],\r\n        position: [0, 0, 0],\r\n        rotation: [0, 0, 0],\r\n        config: { mass: 3, friction: 40, tension: 800 }\r\n    }))\r\n    const bindDrag = useDrag(\r\n        ({ offset: [x, y], vxvy: [vx, vy], down, ...props }) => set({ position: [x / aspect, -y / aspect, 0], rotation: [y / aspect, x / aspect, 0] }),\r\n        { pointerEvents: true }\r\n    )\r\n\r\n    const bindHover = useHover(({ hovering }) => set({ scale: hovering ? [1.2, 1.2, 1.2] : [1, 1, 1] }), {\r\n        pointerEvents: true\r\n    })\r\n\r\n    return (\r\n        <a.mesh {...spring} {...bindDrag()} {...bindHover()} castShadow>\r\n            <dodecahedronBufferGeometry attach=\"geometry\" args={[1.4, 0]} />\r\n            <meshNormalMaterial attach=\"material\" />\r\n        </a.mesh>\r\n    )\r\n}\r\nexport const threeFiber = () => (\r\n    <Canvas style={{ background: \"lightblue\" }} shadowMap camera={{ position: [0, 0, 5] }}>\r\n        <ambientLight intensity={0.5} />\r\n        <spotLight intensity={0.6} position={[20, 10, 10]} angle={0.2} penumbra={1} shadow-mapSize-width={2048} shadow-mapSize-height={2048} castShadow />\r\n        <mesh receiveShadow>\r\n            <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\r\n            <meshPhongMaterial attach=\"material\" color=\"#272727\" />\r\n        </mesh>\r\n        <Dodecahedron />\r\n        <Text>sup</Text>\r\n    </Canvas>\r\n)\r\n\r\nfunction Text({ children, position, opacity, color = 'white', fontSize = 410 }) {\r\n    const {\r\n        size: {width, height},\r\n        viewport: {width: viewportWidth, height: viewportHeight}\r\n    } = useThree()\r\n    const scale = viewportWidth > viewportHeight ? viewportWidth : viewportHeight\r\n    const canvas = useMemo(\r\n        () => {\r\n            const canvas = document.createElement('canvas')\r\n            canvas.width = canvas.height = 2048\r\n            const context = canvas.getContext('2d')\r\n            context.font = `bold ${fontSize}px -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif`\r\n            context.textAlign = 'center'\r\n            context.textBaseline = 'middle'\r\n            context.fillStyle = color\r\n            context.fillText(children, 1024, 1024 - 410 / 2)\r\n            return canvas\r\n        },\r\n        [children, width, height]\r\n    )\r\n    return (\r\n        <a.sprite scale={[scale, scale, 1]} position={position}>\r\n            <a.spriteMaterial attach=\"material\" transparent opacity={opacity}>\r\n                <canvasTexture attach=\"map\" image={canvas} premultiplyAlpha onUpdate={s => (s.needsUpdate = true)} />\r\n            </a.spriteMaterial>\r\n        </a.sprite>\r\n    )\r\n}","import React from 'react'\nimport {DockPanel, DockType} from \"dock-panel\"\nimport logo from './logo.svg'\nimport './App.css'\nimport {initKeyboard} from \"./keyboard\"\nimport {conn, dispatch, state} from \"./store\"\nimport ScrollIntoView from \"./ScrollIntoView\"\nimport {GetTypeStr, rollingSequence} from \"./util\"\nimport {JsonTable} from 'react-json-to-html'\nimport {flatten} from 'flat'\nimport {exampleState} from \"./_generated\"\nimport traverse from \"traverse\"\nimport GridLayout from 'react-grid-layout'\nimport {lorem} from \"./lorem\";\nimport CanvasWrapper from \"./CanvasWrapper\";\nimport {threeFiber} from \"./threeFiber\";\n\nconst style = {\n    padding: '0px',\n    margin: '0px',\n    width: '100%',\n    height: '100%',\n    fontFamily: 'monospace',\n    fontSize: '8pt',\n}\n\nconst render = (obj) => {\n\n    switch (GetTypeStr(obj)) {\n        case \"Undefined\":\n        case \"Null\":\n        case \"NaN\":\n        case \"Date\":\n        case \"RegExp\":\n        case \"Error\":\n        case \"Boolean\":\n        case \"Number\":\n        case \"String\":\n\n        case \"Array\":\n        default: //Object\n\n            Object.keys(obj).map(key=>{\n\n            })\n    }\n    return <JsonTable json={\"\"}/>\n}\n\ninitKeyboard()\nconst Box = (props) => {\n    const s = { background: 'silver', border: '1px solid black' };\n    const style = Object.assign(s, props.style || {})\n    return <div {...props} style={style}  />\n}\nfunction GridLayoutTest() {\n    const content = JSON.stringify(state(), undefined, 2)\n    var layout = [\n        {i: 'a', x: 0, y: 0, w: 2, h: 2},\n        {i: 'b', x: 1, y: 0, w: 1, h: 2, minW: 2, maxW: 4},\n        {i: 'c', x: 2, y: 0, w: 1, h: 2}\n    ];\n    return (\n        <div style={{...style, ...red}}>\n            <GridLayout\n                className=\"layout\"\n\n                layout={layout}\n                cols={layout.length}\n                rowHeight={30}\n                width={600}\n                margin={[0, 0]}\n                containerPadding={[0, 0]}\n            >\n                <Box style={{overflowY: 'auto', width: '100%', height: '100%',}} key=\"a\">{content}</Box>\n                <Box key=\"b\">b</Box>\n                <Box key=\"c\"><CanvasWrapper/></Box>\n\n            </GridLayout>\n        </div>\n\n    );\n}\nfunction App() {\n    return threeFiber()\n\n}\nconst red = {border: \"1px solid red\"}\n\nfunction AppOld() {\n    const rowColors = rollingSequence([\"white\", \"gray\"]);\n    const getKey = (action) => {\n        const foo = {color: rowColors.next().value};\n        return <div style={foo}> {action.n+\" \"+ action.data.type+\" \"+action.data.key} </div>;\n    };\n    const getActions = ()=>state().actions;\n    const createStyle =(borderColor, width, height) => {\n        return {border: \"1px solid \"+borderColor, padding: \"0px\", margin: \"1px\", width, height, overflowY:\"auto\"};\n    }\n    const makeButton = () => <button className={\"btn\"}>sup</button>\n    const derp2 = traverse(exampleState).reduce(function(acc,x){\n        const {path, level, isLeaf} = this;\n        const type = GetTypeStr(x)\n        acc.push({path, level, isLeaf, type})\n        return acc;\n    },[])\n\n\n    //const makeState = ()=><JsonTable json={JSON.stringify (exampleState)} />\n    const makeState = ()=>render(exampleState)\n    const makeDockLeft = (children) => {\n        return (\n            <DockPanel dock={DockType.left} style={createStyle('red')}\n                       onClick={()=>{}}>\n                {children}\n            </DockPanel>\n        )\n    }\n    const makeDockTop = () => {\n        return (\n            <DockPanel dock={DockType.top} style={createStyle('green',\"100%\",\"5%\")}>\n                top\n            </DockPanel>\n        )\n    }\n    const makeKeys = ()=>getActions().map((action,i)=> action.data.key)\n    const makeFoo = ()=> {\n        return (\n            <div>\n                <DockPanel dock={DockType.bottom} style={\n                    createStyle(\"blue\",\"100%\",\"100px\")\n                }>\n\n                </DockPanel>\n                <DockPanel dock={DockType.bottom} style={{background: \"white\", height: 100}}>\n                    <div style={{width:\"100%\",height:\"100%\", overflowY: 'auto'}} onClick={()=>{}}>\n                        {getActions().map((action,n)=> {\n                            return getKey({...action, n});\n                        })}\n                        <ScrollIntoView/>\n                    </div>\n\n                </DockPanel>\n                <DockPanel dock={DockType.fill} style={{background: \"white\"}}>\n                    <div style={{width:\"100%\",height:\"100%\"}} onClick={()=>{}}></div>\n                </DockPanel>\n            </div>\n        )\n    }\n    return (\n        <DockPanel dock={DockType.fill} style={style}>\n            {makeDockLeft(makeButton())}\n            {makeDockLeft(makeState())}\n            {/*{makeDockTop()}*/}\n\n        </DockPanel>\n    )\n}\n\nconst SimpleList = (list) => (\n    <div style={{overflowY: 'auto', width: '100%', height: '100%',}}>\n        <ul style={{listStyle: 'none', padding: 0, margin: 1,wordWrap: \"break-word\"}}>\n            {list.map(item => (\n                <li style={{paddingBottom: '2px', borderBottom: '1px solid black'}} key={item}>{item}</li>\n            ))}\n        </ul>\n    </div>\n);\n\nexport default conn(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {dispatch} from \"./store\";\r\nimport {stateMap} from \"./_generated\";\r\n\r\nvar n=1;\r\n\r\nconst stateVerbs = {\r\n    define: (state)=>{\r\n        const {defs, activeDefIndex} = state;\r\n        return {\r\n            ...state,\r\n            activeDefIndex: activeDefIndex+1,\r\n            defs: [...defs, { value: undefined }],\r\n        }\r\n    }\r\n}\r\n\r\nexport const handleAction = (state, action) => {\r\n    const type = action.type;\r\n    if (type.startsWith(\"@@redux\")) return state;\r\n    const actions = [...state.actions,{...action, n}];\r\n    const ret = {\r\n        actions\r\n    }\r\n    n++;\r\n    return ret\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from \"redux\"\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport {getInitialState, setStore} from \"./store\"\nimport {handleAction} from \"./events\";\n\nconst store = createStore(handleAction, getInitialState())\nsetStore(store)\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}